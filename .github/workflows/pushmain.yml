name: Version and Release
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'package.json'
      - 'package.github.json'
      - 'package-lock.json'
      # - '.github/workflows/**'
    
jobs:
  version-and-release:
    if: ${{ !contains(github.event.head_commit.message, 'Release') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPOSITORY_TOKEN }}
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      - name: 📦 Install dependencies
        run: npm install

      - name: Check Git status
        run: git status

      - name: Stage changes
        run: |
          git add .
          git status

      - name: 🕵️ Detect version type
        id: version-type
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == *"feat:"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Version and tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Update package" || echo "No changes to commit"
          npm version ${{ steps.version-type.outputs.type }} -m "Release %s"
          echo "$(npm pkg get version)"
          git push
          git push --tags

      - name: Create GitHub Release
        if: ${{ steps.version-type.outputs.type == 'minor' }}
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.version-type.outputs.type }}
          release_name: Release ${{ steps.version-type.outputs.type }}
          body: "Release of version ${{ steps.version-type.outputs.type }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}

      - name: Show package version
        run: |
            echo "Package version: $(jq -r '.version' package.json)"
            PACKAGE_VERSION=$(jq -r '.version' package.json)
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: Show package version on package.github.json
        run: |
            echo "Package version: $(jq -r '.version' package.github.json)"

      - name: Update package.github.json and show new version
        run: |
            jq --arg version "$PACKAGE_VERSION" '.version = $version' package.github.json > tmp.json && mv tmp.json package.github.json
            echo "Package version: $(jq -r '.version' package.github.json)"

      - name: Commit and push package.github.json
        run: |
            git add package.github.json
            git commit -m "Update package.github.json"
            git push

      - name: 📦 Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-npm-pkg-github:
    needs: version-and-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPOSITORY_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com

      - name: Pull changes
        run: git pull

      - name: Show package version on package.github.json
        run: |
            echo "Package version: $(jq -r '.version' package.github.json)"
            PACKAGE_VERSION=$(jq -r '.version' package.github.json)
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: 📝 Replace package.json with package.github.json
        run: cp package.github.json package.json

      - name: 📦 Install dependencies
        run: npm install

      - name: 📦 Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}