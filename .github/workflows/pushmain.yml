name: Version, Release, and Publish to GitHub Package Registry

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'package.json'
      - 'package.github.json'
      - 'package-lock.json'

jobs:
  version-release-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPOSITORY_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      - name: 📦 Install dependencies
        run: npm install

      - name: 🕵️ Detect version type
        id: version-type
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == *"feat:"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Version and tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Obtener la versión actual y aplicar la versión semántica
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "Current version is $CURRENT_VERSION"
          
          # Usar npm para aumentar la versión semántica de acuerdo al tipo
          npm version ${{ steps.version-type.outputs.type }} --no-git-tag-version -m "Release %s"
          
          NEW_VERSION=$(jq -r .version package.json)
          echo "New version is $NEW_VERSION"
          
          # Establecer la versión extraída como variable de entorno
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: 🔄 Copiar versión a package.github.json
        run: |
          jq '.version |= $new_version' package.json --arg new_version "$NEW_VERSION" > package.github.json

      - name: 📤 Push cambios y tags
        run: |
          git add package.json package.github.json
          git commit -m "Update package version to $NEW_VERSION" || echo "No changes to commit"
          git push
          git push --tags

      - name: 🚀 Crear Release en GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-type.outputs.type }}
          name: "Release v${{ steps.version-type.outputs.type }}"
          body: "Automated release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}

      - name: 📦 Reemplazar package.json con package.github.json
        run: cp package.github.json package.json

      - name: 📦 Publicar en GitHub Package Registry
        run: |
          VERSION=$(jq -r .version package.github.json)
          echo "La versión extraída es: $VERSION"
          # Establecer la versión como una variable de entorno para el siguiente paso
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - run: npm ci

      - run: npm publish --tag $VERSION
        env:
          NODE_AUTH_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
